{
  "info": {
    "name": "Oullin API â€” Token Auth (Production)",
    "description": "Postman collection for calling protected endpoints in production via Caddy (https://oullin.io/api). It uses a collection-level pre-request script to compute the required X-API-* headers and signature.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_postman_id": "9a1b6e3a-2c24-4e24-8a8c-2f1ca5a7cb21"
  },
  "item": [
    {
      "name": "List posts (POST /api/posts)",
      "request": {
        "method": "POST",
        "header": [
          { "key": "Content-Type", "value": "application/json" }
        ],
        "url": {
          "raw": "{{baseUrl}}/posts",
          "host": ["{{baseUrl}}"],
          "path": ["posts"]
        },
        "body": {
          "mode": "raw",
          "raw": "{}"
        },
        "description": "List or filter posts. Requires signed headers generated by the collection pre-request script."
      },
      "response": []
    },
    {
      "name": "Show post (GET /api/posts/hello)",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/posts/hello",
          "host": ["{{baseUrl}}"],
          "path": ["posts", "hello"]
        },
        "description": "Fetch a single post by slug (example: hello)."
      },
      "response": []
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "(function() {",
          "  // CryptoJS available in Postman sandbox",
          "  const crypto = require('crypto-js');",
          "  function sha256Hex(str) { return crypto.SHA256(str || '').toString(crypto.enc.Hex); }",
          "  function sortedQuery(u) {",
          "    const url = new URL(u);",
          "    const keys = Array.from(url.searchParams.keys());",
          "    keys.sort();",
          "    const parts = [];",
          "    for (const k of keys) {",
          "      const vs = url.searchParams.getAll(k).sort();",
          "      for (const v of vs) parts.push(encodeURIComponent(k) + '=' + encodeURIComponent(v));",
          "    }",
          "    return parts.join('&');",
          "  }",
          "  const method = pm.request.method.toUpperCase();",
          "  const urlStr = pm.environment.get('baseUrl') + pm.request.url.getPathWithQuery();",
          "  const urlObj = new URL(urlStr);",
          "  const path = urlObj.pathname;",
          "  const query = sortedQuery(urlStr);",
          "  const username = pm.environment.get('username');",
          "  const publicKey = pm.environment.get('publicKey');",
          "  const secretKey = pm.environment.get('secretKey');",
          "  const timestamp = Math.floor(Date.now() / 1000).toString();",
          "  const nonce = crypto.lib.WordArray.random(16).toString();",
          "  const body = (method === 'GET' || method === 'DELETE') ? '' : (pm.request.body && pm.request.body.raw || '');",
          "  const bodyHash = sha256Hex(body);",
          "  const canonical = [method, path, query, username, publicKey, timestamp, nonce, bodyHash].join('\n');",
          "  const signature = crypto.HmacSHA256(canonical, secretKey).toString();",
          "  pm.request.headers.upsert({ key: 'X-Request-ID', value: pm.environment.get('requestId') || nonce });",
          "  pm.request.headers.upsert({ key: 'X-API-Username', value: username });",
          "  pm.request.headers.upsert({ key: 'X-API-Key', value: publicKey });",
          "  pm.request.headers.upsert({ key: 'X-API-Timestamp', value: timestamp });",
          "  pm.request.headers.upsert({ key: 'X-API-Nonce', value: nonce });",
          "  pm.request.headers.upsert({ key: 'X-API-Signature', value: signature });",
          "})();"
        ]
      }
    }
  ],
  "variable": [
    { "key": "baseUrl", "value": "https://oullin.io/api", "type": "string" },
    { "key": "username", "value": "", "type": "string" },
    { "key": "publicKey", "value": "", "type": "string" },
    { "key": "secretKey", "value": "", "type": "string" },
    { "key": "requestId", "value": "", "type": "string" }
  ]
}
