# Caddy will automatically provision a Let's Encrypt certificate.
gocanto.dev, www.gocanto.dev {
	@www host www.gocanto.dev
	handle @www {
		redir https://gocanto.dev{uri} permanent
	}

	# Redirect everything to the canonical host
	handle {
		redir https://oullin.io{uri} permanent
	}
}

oullin.io {
	encode gzip zstd

	header {
		Strict-Transport-Security "max-age=31536000;"
		X-Frame-Options "SAMEORIGIN"
		X-Content-Type-Options "nosniff"
		Referrer-Policy "strict-origin-when-cross-origin"
	}

	log {
		output file /var/log/caddy/oullin.io.log {
			roll_size 10mb
			roll_keep 5
		}
		format json
	}

	# --- Public listener: block protected path
	@protected_public path /api/generate-signature*
	handle @protected_public {
		respond 403
	}

	@preflight {
		method OPTIONS
		header Origin *
	}

	# --- API handler (public)
	handle_path /api/* {
		header {
			# If you serve both apex and www, consider reflecting origin:
			# Access-Control-Allow-Origin "{http.request.header.Origin}"
			Access-Control-Allow-Origin "https://oullin.io"
			Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS"
			Access-Control-Allow-Headers "X-API-Key, X-API-Username, X-API-Signature, X-API-Timestamp, X-API-Nonce, X-Request-ID, Content-Type, User-Agent, If-None-Match, X-API-Intended-Origin"
			Access-Control-Expose-Headers "ETag, X-Request-ID"
		}

		handle @preflight {
			header Access-Control-Allow-Origin "{http.request.header.Origin}"
			header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS"
			header Access-Control-Allow-Headers "X-API-Key, X-API-Username, X-API-Signature, X-API-Timestamp, X-API-Nonce, X-Request-ID, Content-Type, User-Agent, If-None-Match, X-API-Intended-Origin"
			header Access-Control-Max-Age "86400"
			respond 204
		}

		reverse_proxy api:8080 {
			# preserve original host/proto/client ip to the app
			header_up Host {host}
			header_up X-Forwarded-Host {host}
			header_up X-Forwarded-Proto {scheme}
			header_up X-Forwarded-For {remote}

			# pass through app-specific headers
			header_up X-API-Username {http.request.header.X-API-Username}
			header_up X-API-Key {http.request.header.X-API-Key}
			header_up X-API-Signature {http.request.header.X-API-Signature}
			header_up X-API-Timestamp {http.request.header.X-API-Timestamp}
			header_up X-API-Nonce {http.request.header.X-API-Nonce}
			header_up X-Request-ID {http.request.header.X-Request-ID}
			header_up Content-Type {http.request.header.Content-Type}
			header_up User-Agent {http.request.header.User-Agent}
			header_up If-None-Match {http.request.header.If-None-Match}
			header_up X-API-Intended-Origin {http.request.header.X-API-Intended-Origin}

			transport http {
				dial_timeout 10s
				response_header_timeout 30s
			}
		}
	}

	# --- Default handler: proxy to web, preserving Host (ALL inside reverse_proxy)
	handle {
		reverse_proxy web:80 {
			header_up Host {host}
			header_up X-Forwarded-Host {host}
			header_up X-Forwarded-Proto {scheme}
			header_up X-Forwarded-For {remote}
		}
	}
}

# INTERNAL mTLS entrypoint for the single protected path
:8443 {
	tls /etc/caddy/mtls/server.pem /etc/caddy/mtls/server.key {
		client_auth {
			mode require_and_verify
			trust_pool file /etc/caddy/mtls/ca.pem
		}
	}

	encode gzip zstd

	@sig path /api/generate-signature*
	handle @sig {
		uri strip_prefix /api
		reverse_proxy api:8080
	}

	handle {
		respond 403
	}
}
