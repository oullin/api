#
# ----------------------------------------------------------------------------------------------------------------------
#                                    GLOBAL BUILD ARGUMENTS
# ----------------------------------------------------------------------------------------------------------------------
#
# These args can be overridden at build time with `--build-arg NAME=value`.
# Otherwise, you could use you docker-compose file to achive the same purpose.
#
# ----------------------------------------------------------------------------------------------------------------------
#

ARG APP_VERSION=0.0.0.1
ARG BUILD_TAGS="posts,experience,profile,projects,social,talks,gus,gocanto"
ARG BINARY_NAME=oullin_api

# Non-root user/group settings.
ARG APP_USER=appuser
ARG APP_GROUP=appgroup
ARG APP_HOME=/home/${APP_USER}

# Container runtime port.
ARG APP_HOST_PORT=8080

# Application directory inside container.
ARG APP_DIR=/app

# Storage directories (relative to APP_DIR).
ARG STORAGE_DIR=storage
ARG LOGS_DIR=logs
ARG MEDIA_DIR=media
ARG FIXTURES_DIR=fixture

# ----------------------------------------------------------------------------------------------------------------------
#                                           BUILDER STAGE
# ----------------------------------------------------------------------------------------------------------------------
FROM golang:1.25.1-alpine@sha256:b6ed3fd0452c0e9bcdef5597f29cc1418f61672e9d3a2f55bf02e7222c014abd AS builder

# Bring in the build args needed in this stage.
ARG APP_DIR
ARG BINARY_NAME
ARG APP_VERSION
ARG BUILD_TAGS

# Configure Go build cache and module cache under our APP_DIR.
ENV GOPATH=${APP_DIR}/.gopath
ENV GOMODCACHE=${APP_DIR}/.gopath/pkg/mod
ENV GOCACHE=${APP_DIR}/.gocache

# Create the Go module & build cache directories.
RUN mkdir -p ${GOMODCACHE} ${GOCACHE}

# Set the working directory for the build.
WORKDIR ${APP_DIR}

# Copy Go module files and download dependencies.
COPY go.mod go.sum ./
RUN go mod download

# Copy remaining source code into the builder.
COPY . .

# Compile a statically-linked binary.
#
#       * CGO_ENABLED=0: disable CGO for static builds.
#       * -tags: apply build tags.
#       * -o: output binaries path/name.
#       * -ldflags: strip symbols and inject version.
#
RUN CGO_ENABLED=0 go build \
    -tags "${BUILD_TAGS}" \
    -o ${APP_DIR}/${BINARY_NAME} \
    -ldflags="-s -w -X main.Version=${APP_VERSION}" \
    .

# ----------------------------------------------------------------------------------------------------------------------
#                                           FINAL STAGE
# ----------------------------------------------------------------------------------------------------------------------
FROM alpine:3.22@sha256:4bcff63911fcb4448bd4fdacec207030997caf25e9bea4045fa6c8c44de311d1

# Bring in the runtime args.
ARG APP_USER
ARG APP_GROUP
ARG APP_HOME
ARG APP_DIR
ARG BINARY_NAME
ARG STORAGE_DIR
ARG LOGS_DIR
ARG MEDIA_DIR
ARG FIXTURES_DIR
ARG APP_HOST_PORT

# Install timezone data so Go’s time.* functions work correctly.
RUN apk add --no-cache tzdata
ENV TZ=Asia/Singapore

# Create the system group for our non-root user.
RUN addgroup -S ${APP_GROUP}

# Create the system user, assign to group, set its home.
RUN adduser -S ${APP_USER} \
	-G ${APP_GROUP} \
	-h ${APP_HOME} \
	${APP_USER}

# Ensure the user’s home directory actually exists.
RUN mkdir -p ${APP_HOME}

# Switch to the application directory (implicitly creates it if missing).
WORKDIR ${APP_DIR}

# Create storage subdirectories under the APP_DIR.
#
#       * logs/: for application logs
#       * media/: for uploaded/static media
#       * fixture/: for static fixtures data
#
RUN mkdir -p ${STORAGE_DIR}/${LOGS_DIR}
RUN mkdir -p ${STORAGE_DIR}/${MEDIA_DIR}
RUN mkdir -p ${STORAGE_DIR}/${FIXTURES_DIR}

# Copy fixture files from builder stage.
COPY ${STORAGE_DIR}/${FIXTURES_DIR} ${STORAGE_DIR}/${FIXTURES_DIR}/

# Copy the compiled binary and mark it executable.
COPY --from=builder ${APP_DIR}/${BINARY_NAME} ${APP_DIR}/
RUN chmod +x ${APP_DIR}/${BINARY_NAME}

# Give ownership of home and app directories to our non-root user.
RUN chown -R ${APP_USER}:${APP_GROUP} ${APP_HOME}
RUN chown -R ${APP_USER}:${APP_GROUP} ${APP_DIR}

# Switch to non-root user for all subsequent container processes.
USER ${APP_USER}:${APP_GROUP}

# Arguments do not exist at container runtime, so ${APP_DIR} and ${BINARY_NAME} are empty when the entryoint is called.
# Therefore, we need to send those values as environment variables for the shell to pick them up at runtime.
ENV APP_DIR=${APP_DIR}
ENV BINARY_NAME=${BINARY_NAME}

# Expose the application port.
EXPOSE ${APP_HOST_PORT}

# Launch the binary (shell-form so that environment variables are expanded).
ENTRYPOINT ["/bin/sh", "-c", "exec ${APP_DIR}/${BINARY_NAME}"]
