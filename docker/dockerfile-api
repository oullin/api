#
# ----------------------------------------------------------------------------------------------------------------------
#                                    GLOBAL BUILD ARGUMENTS
# ----------------------------------------------------------------------------------------------------------------------
#
# These args can be overridden at build time with `--build-arg NAME=value`.
# Otherwise, you could use you docker-compose file to achive the same purpose.
#
# ----------------------------------------------------------------------------------------------------------------------
#

ARG APP_VERSION=0.0.0.1
ARG BUILD_TAGS="posts,experience,profile,projects,social,talks,gus,gocanto"
ARG BINARY_NAME=oullin_api

# Base image digests
ARG GO_VERSION=1.25.3
ARG GO_IMAGE_VARIANT=alpine3.22
ARG GO_TOOLCHAIN=go1.25.3
ARG GOLANG_ALPINE_DIGEST=sha256:c3dc5d5e8cf34ccb2172fb8d1aa399aa13cd8b60d27bba891d18e3b436a0c5f6
ARG ALPINE_VERSION=3.22
ARG ALPINE_DIGEST=sha256:4b7ce07002c69e8f3d704a9c5d6fd3053be500b7f1c69fc0d80990c2ad8dd412

# Non-root user/group settings.
ARG APP_USER=appuser
ARG APP_GROUP=appgroup
ARG APP_HOME=/home/${APP_USER}

# Container runtime port.
ARG APP_HOST_PORT=8080

# Application directory inside container.
ARG APP_DIR=/app

# Storage directories (relative to APP_DIR).
ARG STORAGE_DIR=storage
ARG LOGS_DIR=logs
ARG MEDIA_DIR=media
ARG FIXTURES_DIR=fixture
ARG TZ=Asia/Singapore

# ----------------------------------------------------------------------------------------------------------------------
#                                           BUILDER STAGE
# ----------------------------------------------------------------------------------------------------------------------
FROM golang:${GO_VERSION}-${GO_IMAGE_VARIANT}@${GOLANG_ALPINE_DIGEST} AS builder

# Bring in the build args needed in this stage.
ARG GO_TOOLCHAIN
ENV GOTOOLCHAIN=${GO_TOOLCHAIN}
ARG APP_DIR
ARG BINARY_NAME
ARG APP_VERSION
ARG BUILD_TAGS

# Install system dependencies required to build with CGO and libwebp support.
RUN apk add --no-cache \
        build-base=0.5-r3 \
        pkgconf=2.4.3-r0 \
        libwebp-dev=1.5.0-r0

# Configure Go build cache and module cache under our APP_DIR.
ENV GOPATH=${APP_DIR}/.gopath
ENV GOMODCACHE=${APP_DIR}/.gopath/pkg/mod
ENV GOCACHE=${APP_DIR}/.gocache
ENV CGO_ENABLED=1

# Create the Go module & build cache directories.
RUN mkdir -p ${GOMODCACHE} ${GOCACHE}

# Set the working directory for the build.
WORKDIR ${APP_DIR}

# Copy Go module files and download dependencies.
COPY go.mod go.sum ./
RUN go mod download

# Copy remaining source code into the builder.
COPY . .

# Compile the application binary with CGO enabled so WebP encoding is available.
#
#       * -tags: apply build tags.
#       * -o: output binaries path/name.
#       * -ldflags: strip symbols and inject version.
#
RUN go build \
    -tags "${BUILD_TAGS}" \
    -o ${APP_DIR}/${BINARY_NAME} \
    -ldflags="-s -w -X main.Version=${APP_VERSION}" \
    .

# ----------------------------------------------------------------------------------------------------------------------
#                                           FINAL STAGE
# ----------------------------------------------------------------------------------------------------------------------
FROM alpine:${ALPINE_VERSION}@${ALPINE_DIGEST}

# Bring in the runtime args.
ARG APP_USER
ARG APP_GROUP
ARG APP_HOME
ARG APP_DIR
ARG BINARY_NAME
ARG STORAGE_DIR
ARG LOGS_DIR
ARG MEDIA_DIR
ARG FIXTURES_DIR
ARG APP_HOST_PORT

# Timezone configuration (default to Asia/Singapore).
ARG TZ=Asia/Singapore

# Install timezone data and runtime dependencies for the CGO-enabled binary.
RUN apk add --no-cache tzdata=2025b-r0 libwebp=1.5.0-r0
ENV TZ=${TZ}

# Create the system group for our non-root user.
RUN addgroup -S ${APP_GROUP}

# Create the system user, assign to group, set its home.
RUN adduser -S ${APP_USER} \
	-G ${APP_GROUP} \
	-h ${APP_HOME} \
	${APP_USER}

# Ensure the userâ€™s home directory actually exists.
RUN mkdir -p ${APP_HOME}

# Switch to the application directory (implicitly creates it if missing).
WORKDIR ${APP_DIR}

# Create storage subdirectories under the APP_DIR.
#
#       * logs/: for application logs
#       * media/: for uploaded/static media
#       * fixture/: for static fixtures data
#
RUN mkdir -p ${STORAGE_DIR}/${LOGS_DIR}
RUN mkdir -p ${STORAGE_DIR}/${MEDIA_DIR}
RUN mkdir -p ${STORAGE_DIR}/${FIXTURES_DIR}

# Copy fixture files from builder stage.
COPY ${STORAGE_DIR}/${FIXTURES_DIR} ${STORAGE_DIR}/${FIXTURES_DIR}/

# Copy the compiled binary and mark it executable.
COPY --from=builder ${APP_DIR}/${BINARY_NAME} ${APP_DIR}/
RUN chmod +x ${APP_DIR}/${BINARY_NAME}

# Give ownership of home and app directories to our non-root user.
RUN chown -R ${APP_USER}:${APP_GROUP} ${APP_HOME}
RUN chown -R ${APP_USER}:${APP_GROUP} ${APP_DIR}

# Switch to non-root user for all subsequent container processes.
USER ${APP_USER}:${APP_GROUP}

# Arguments do not exist at container runtime, so ${APP_DIR} and ${BINARY_NAME} are empty when the entryoint is called.
# Therefore, we need to send those values as environment variables for the shell to pick them up at runtime.
ENV APP_DIR=${APP_DIR}
ENV BINARY_NAME=${BINARY_NAME}

# Expose the application port.
EXPOSE ${APP_HOST_PORT}

# Launch the binary (shell-form so that environment variables are expanded).
ENTRYPOINT ["/bin/sh", "-c", "exec ${APP_DIR}/${BINARY_NAME}"]
