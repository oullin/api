# DB: Define the source of the secrets on the host machine.
secrets:
    pg_username:
        file: ${DB_SECRET_USERNAME:-./database/infra/secrets/pg_username}
    pg_password:
        file: ${DB_SECRET_PASSWORD:-./database/infra/secrets/pg_password}
    pg_dbname:
        file: ${DB_SECRET_DBNAME:-./database/infra/secrets/pg_dbname}

volumes:
    caddy_data:
    caddy_config:
    go_mod_cache:
        driver: local

    prometheus_data:
        driver: local

    # --- DB: Define a named volume at the top level.
    #     Docker will manage its lifecycle.
    oullin_db_data:
        driver: local

networks:
    caddy_net:
        name: caddy_net
        external: true
    oullin_net:
        name: oullin_net
        driver: bridge

services:
        caddy_prod:
            image: api-caddy_prod
            build:
                context: ./caddy
                dockerfile: Dockerfile
                args:
                    - CADDY_VERSION=2.10.2

            profiles: ["prod"]
            container_name: oullin_proxy_prod
            restart: unless-stopped
            depends_on:
                - api
            ports:
                - "80:80"
                - "443:443"
                - "443:443/udp" # Required for HTTP/3
            volumes:
                - caddy_data:/data
                - caddy_config:/config
                - ./caddy/Caddyfile.prod:/etc/caddy/Caddyfile
                - ${CADDY_LOGS_PATH}:/var/log/caddy
                - ./caddy/mtls:/etc/caddy/mtls:ro
            networks:
                caddy_net:
                    aliases:
                        - proxy

        prometheus:
            image: prom/prometheus:v3.0.1
            profiles: ["prod"]
            container_name: oullin_prometheus
            restart: unless-stopped
            command:
                - "--config.file=/etc/prometheus/prometheus.yml"
                - "--storage.tsdb.path=/prometheus"
            ports:
                - "127.0.0.1:9090:9090"
            volumes:
                - prometheus_data:/prometheus
                - ./metrics/prometheus.yml:/etc/prometheus/prometheus.yml:ro
            networks:
                - caddy_net
            depends_on:
                - caddy_prod
                - cadvisor

        cadvisor:
            image: gcr.io/cadvisor/cadvisor:v0.49.1
            profiles: ["prod"]
            container_name: oullin_cadvisor
            restart: unless-stopped
            privileged: true
            command:
                - "--docker_only=true"
            volumes:
                - /:/rootfs:ro
                - /var/run:/var/run:ro
                - /sys:/sys:ro
                - /var/lib/docker/:/var/lib/docker:ro
            networks:
                - caddy_net

        caddy_local:
            build:
                context: ./caddy
                dockerfile: Dockerfile
                args:
                    - CADDY_VERSION=2.10.2

            profiles: ["local"]
            container_name: oullin_local_proxy
            restart: unless-stopped
            depends_on:
                - api
            ports:
                - "8080:80"
                - "8443:443"
            volumes:
                - caddy_data:/data
                - caddy_config:/config
                - ./caddy/mtls:/etc/caddy/mtls:ro
                - ./caddy/Caddyfile.local:/etc/caddy/Caddyfile
            networks:
                - caddy_net

        # A dedicated service for running one-off Go commands
        api-runner:
          container_name: runner
          restart: no
          env_file:
            - ./.env
          build:
            context: .
            dockerfile: ./docker/dockerfile-api
            target: builder
          volumes:
            - .:/app
            - go_mod_cache:/go/pkg/mod
            - "${ENV_SPA_DIR}:${ENV_SPA_DIR}"
            - "${ENV_SPA_IMAGES_DIR}:${ENV_SPA_IMAGES_DIR}"
          working_dir: /app
          environment:
              CGO_ENABLED: 1
              ENV_DB_HOST: api-db
              ENV_SPA_DIR: ${ENV_SPA_DIR}
              ENV_DB_PORT: ${ENV_DB_PORT:-5432}
              ENV_PING_USERNAME: ${ENV_PING_USERNAME}
              ENV_PING_PASSWORD: ${ENV_PING_PASSWORD}
              ENV_SPA_IMAGES_DIR: ${ENV_SPA_IMAGES_DIR}
          networks:
            - oullin_net
          secrets:
            - pg_username
            - pg_password
            - pg_dbname
          depends_on:
            api-db:
              condition: service_healthy

        api:
            user: root
            security_opt:
              - apparmor:unconfined
            env_file:
                - .env
            volumes:
              - ./.env:/app/.env:ro
            environment:
                CGO_ENABLED: 1
                # --- This ensures the Go web server listens for connections from other
                #     containers (like Caddy), not just from within itself.
                ENV_DB_HOST: api-db
                ENV_HTTP_HOST: 0.0.0.0
            build:
                context: .
                dockerfile: ./docker/dockerfile-api
                args:
                    - APP_VERSION=0.0.0.1
                    - APP_HOST_PORT=${ENV_HTTP_PORT}
                    - APP_USER=${ENV_DOCKER_USER}
                    - APP_GROUP=${ENV_DOCKER_USER_GROUP}
                    - APP_DIR=/app
                    - BINARY_NAME=oullin_api
            restart: unless-stopped
            secrets:
                - pg_username
                - pg_password
                - pg_dbname
            depends_on:
                api-db:
                    condition: service_healthy
            expose:
                - ${ENV_HTTP_PORT}
            networks:
                oullin_net: {}
                caddy_net:
                    aliases:
                      - api

        api-db-migrate:
            image: migrate/migrate:v4.19.0
            container_name: oullin_db_migrate
            networks:
                - oullin_net
            volumes:
                - ./database/infra/migrations:/migrations
                - ./database/infra/scripts/run-migration.sh:/run-migration.sh
            secrets:
                - pg_username
                - pg_password
                - pg_dbname
            entrypoint: /run-migration.sh
            command: ["up"]
            depends_on:
                api-db:
                    condition: service_healthy
            restart: no

        api-db:
            # --- Hostinger's Ubuntu VPS hyper-restrictive environments do not allow PostgreSQL containers to behave
            #     predictably. So this option here is a workaround to bypass the apparmor hell configuration that
            #     did not work in spite of days of tries.
            security_opt:
              - apparmor:unconfined

            # --- The container needs to start as root for just a moment to run the chown command and fix the
            #     permissions on the data folder. Immediately after fixing the permissions, our custom
            #     entrypoint script switches to the normal, non-root postgres user to run the actual database.
            user: root

            # Ensure the database always restarts on server reboot or crash.
            restart: always

            image: postgres:17.6-alpine3.22
            container_name: oullin_db

            env_file:
                - .env
            networks:
                - oullin_net

            # --- Use Docker Secrets instead of .env files for credentials.
            #     Docker automatically reads from files specified by these _FILE variables.
            environment:
                POSTGRES_USER_FILE: /run/secrets/pg_username
                POSTGRES_PASSWORD_FILE: /run/secrets/pg_password
                POSTGRES_DB_FILE: /run/secrets/pg_dbname
                PGDATA: /var/lib/postgresql/data/pgdata

            # --- Securing port binding.
            #     Binds the port ONLY to my VPS's localhost (127.0.0.1).
            #
            #     This prevents any direct access to the public internet. My applications running on the same VPS
            #     can connect to it. The ':-5432' provides a fallback default port if ENV_DB_PORT is not set.
            ports:
                - "127.0.0.1:${ENV_DB_PORT:-5432}:5432"

            secrets:
                - pg_username
                - pg_password
                - pg_dbname
            volumes:
                # --- Docker Named Volume for data persistence.
                #     This decouples critical data from the host's file structure, making it more robust & portable.
                - oullin_db_data:/var/lib/postgresql/data

                - ./database/infra/ssl/server.crt:/etc/ssl/certs/server.crt
                - ./database/infra/ssl/server.key:/etc/ssl/private/server.key

                # --- PostgreSQL setup scripts and configuration files as read-only (:ro) for security.
                - ./database/infra/config/postgresql.conf:/etc/postgresql/postgresql.conf:ro
                - ./database/infra/scripts/healthcheck.sh:/healthcheck.sh:ro
                - ./database/infra/scripts/postgres-entrypoint.sh:/postgres-entrypoint.sh

            entrypoint: ["/postgres-entrypoint.sh"]

            logging:
                driver: "json-file"
                options:
                    max-file: 20
                    max-size: 10M

            healthcheck:
                test: ["CMD", "/healthcheck.sh"]
                interval: 10s
                timeout: 5s
                retries: 5
